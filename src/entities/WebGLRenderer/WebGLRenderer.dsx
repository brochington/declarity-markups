import Declarity from 'declarity'
import * as THREE from 'three'

class WebGLRenderer {
    getChildContext = ({state}) => {
        const {renderer, renderSize} = state;

        return {renderer, renderSize}
    }

    create = ({props}) => {
        let renderer = new THREE.WebGLRenderer()
        renderer.setSize(window.innerWidth, window.innerHeight, true)
        props.container.appendChild(renderer.domElement)
        console.log(renderer)

        console.log('window.devicePixelRatio', window.devicePixelRatio)
        renderer.setPixelRatio(window.devicePixelRatio)
        const renderSize = renderer.getSize()

        return {renderer, renderSize}
    }

    update = ({state}) => {
      const {renderer} = state
      const renderSize = renderer.getSize()

      if (window.innerWidth !== renderSize.width || window.innerHeight !== renderSize.height) {
        renderer.setSize(window.innerWidth, window.innerHeight, true)
      }

      return {renderSize}
    }
    // Make sure that if an entity doesn't have a render function, that children are still 'rendered'
    render = ({children}) => {
        return children;
    }
}

export default WebGLRenderer
