import Declarity from 'declarity'
import * as THREE from 'three'
import Immutable from 'immutable'

import Sheet from '../Sheet'
import Raycaster from '../Raycaster'

import animatedRotation from '../../systems/animatedRotation'
import animatedPosition from '../../systems/animatedPosition'

import sheetImg1 from '../../assets/img/1.jpg'
import sheetImg2 from '../../assets/img/2.jpg'
import sheetImg3 from '../../assets/img/3.jpg'

console.log(sheetImg1)

const sheetsData = [{
    id: 1,
    originalPosition: {x: 0, y: 0, z: 0},
    originalRotation: {x: 0, y: 0, z: 0},
    position: {x: 0, y: 0, z: 0},
    rotation: {x: 0, y: 0, z: 0},
    image: sheetImg1
}, {
    id: 2,
    originalPosition: {x: 0, y: 10, z: 10},
    originalRotation: {x: 0, y: 0, z: 0},
    position: {x: 0, y: 0, z: 10},
    rotation: {x: 0, y: 0, z: 0},
    image: sheetImg2
}, {
    id: 3,
    originalPosition: {x: 0, y: 20, z: 20},
    originalRotation: {x: 0, y: 0, z: 0},
    position: {x: 0, y: 0, z: 20},
    rotation: {x: 0, y: 0, z: 0},
    image: sheetImg3
// }, {
//     id: 4,
//     originalPosition: {x: 0, y: 0, z: 3},
//     originalRotation: {x: 0, y: 0, z: 0},
//     position: {x: 0, y: 0, z: 3},
//     rotation: {x: 0, y: 0, z: 0},
//     color: 0xff0000
// }, {
//     id: 5,
//     originalPosition: {x: 0, y: 0, z: 4},
//     originalRotation: {x: 0, y: 0, z: 0},
//     position: {x: 0, y: 0, z: 4},
//     rotation: {x: 0, y: 0, z: 0},
//     color: 0x00ff00
// }, {
//     id: 6,
//     originalPosition: {x: 0, y: 0, z: 5},
//     originalRotation: {x: 0, y: 0, z: 0},
//     position: {x: 0, y: 0, z: 5},
//     rotation: {x: 0, y: 0, z: 0},
//     color: 0x0000ff
}]

const onClick = (clickHandler, sheetObj, getParams) => {
    return {
        update: ({context, state, props}) => {
            const {intersects, mouseEvents} = context
            const {sheet, hasClicked} = state

            let newHasClicked = hasClicked

            if (
                intersects[0] &&
                intersects[0].object === sheet &&
                mouseEvents.mousedown &&
                !hasClicked
            ) {
                newHasClicked = true
                clickHandler && clickHandler(sheetObj, getParams)
            }

            if (mouseEvents.mouseup) {
                newHasClicked = false
            }

            return {hasClicked: newHasClicked}
        }
    }
}

const clickHandler = (sheet, getParams) => {
    const { context } = getParams()
    const { actions } = context
    // console.log('clicked!!', sheet, getParams())

    actions.setActiveSheet(sheet)

    actions.viewSheet(sheet.get('id'))
}

class SceneContent {
    create = ({context}) => {
        const {scene, actions} = context;
        actions.setSheets(sheetsData)
    }

    update = ({state}) => {

    }

    render = ({context, getParams}) => {
        const sheets = context.appState.get('sheets', Immutable.List()).map(sheet => {
            return (
                <Sheet
                    key={`sheet-${sheet.get('id')}`}
                    position={sheet.get('position').toObject()}
                    rotation={sheet.get('rotation', Immutable.Map()).toObject()}
                    animate={true}
                    image={sheet.get('image')}
                    systems={[
                        animatedPosition('sheet'),
                        animatedRotation('sheet'),
                        onClick(clickHandler, sheet, getParams)
                    ]}
                />
            )
        })

        return (
            <Raycaster key='sheet-raycaster'>
                {sheets.toJS()}
            </Raycaster>
        );
    }
}

export default SceneContent
