import Declarity from 'declarity'
import * as THREE from 'three'
import Immutable from 'immutable'

import Sheet from '../Sheet'
import Raycaster from '../Raycaster'
import ProjectMode from '../ProjectMode'

import animatedRotation from '../../systems/animatedRotation'
import animatedPosition from '../../systems/animatedPosition'

import sheetImg1 from '../../assets/img/1.jpg'
import sheetImg2 from '../../assets/img/2.jpg'
import sheetImg3 from '../../assets/img/3.jpg'

const sheetsData = [{
    id: 1,
    originalPosition: {x: 0, y: 0, z: 0},
    originalRotation: {x: 0, y: 0, z: 0},
    position: {x: 0, y: 0, z: 0},
    rotation: {x: 0, y: 0, z: 0},
    image: sheetImg1
}, {
    id: 2,
    originalPosition: {x: 0, y: 100, z: 100},
    originalRotation: {x: 0, y: 0, z: 0},
    position: {x: 0, y: 0, z: 100},
    rotation: {x: 0, y: 0, z: 0},
    image: sheetImg2
}, {
    id: 3,
    originalPosition: {x: 0, y: 200, z: 200},
    originalRotation: {x: 0, y: 0, z: 0},
    position: {x: 0, y: 200, z: 200},
    rotation: {x: 0, y: 0, z: 0},
    image: sheetImg3
}]

const onClick = (clickHandler, sheetObj, getParams) => {
    return {
        update: ({context, state, props}) => {
            const {intersects, mouseEvents} = context
            const {sheet, hasClicked} = state

            let newHasClicked = hasClicked

            if (
                intersects[1] &&
                intersects[1].object === sheet &&
                mouseEvents.mousedown &&
                !hasClicked
            ) {
                newHasClicked = true
                clickHandler && clickHandler(sheetObj, getParams)
            }

            if (mouseEvents.mouseup) {
                newHasClicked = false
            }

            return {hasClicked: newHasClicked}
        }
    }
}

const clickHandler = (sheet, getParams) => {
    const { context } = getParams()
    const { actions } = context

    actions.setActiveSheet(sheet)

    actions.viewSheet(sheet.get('id'))
}

class SceneContent {
    create = ({context}) => {
        const {scene, actions} = context;
        actions.setSheets(sheetsData)
        actions.initScene()
    }

    update = ({state}) => {

    }

    render = ({context, getParams}) => {
      const {scene} = context
        const sheets = context.appState.get('sheets', Immutable.List()).map(sheet => {
            return (
                <Sheet
                    key={`sheet-${sheet.get('id')}`}
                    position={sheet.get('position').toObject()}
                    rotation={sheet.get('rotation', Immutable.Map()).toObject()}
                    animate={true}
                    image={sheet.get('image')}
                    systems={[
                        animatedPosition('sheet'),
                        animatedRotation('sheet'),
                        onClick(clickHandler, sheet, getParams)
                    ]}
                />
            )
        })

        const activeMode = context.appState.get('activeMode')

        let modeContent;

        if (activeMode == 'project') {
          modeContent = <ProjectMode key="project-mode" />
        }
        // console.log(modeContent)
        return (
            <Raycaster key='sheet-raycaster' possibleIntersections={scene.children}>
                {/* {sheets.toJS()} */}
                {/* {modeContent} */}
                <ProjectMode key="project-mode" />
            </Raycaster>
        );
    }
}

export default SceneContent
